#!/bin/bash

POSITIONAL=()
while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
        -i|--input)
            seq="$2"
            shift
            shift
            ;;
        -o|--output)
            OUTPUT="$2"
            shift
            shift
            ;;
        -n|--numthreads)
            numthreads="$2"
            shift
            shift
            ;;
        *)
            POSITIONAL+=("$1")
            shift
            ;;
    esac
done
set -- "${POSITIONAL[@]}"
echo "done parsing args"
lenwords=23
#numthreads=1
lownumthreads=$(( $numthreads - 1 ))
k=5
firstitr=1
tag=output
if [ -z ${seq+x} ]; then
    seq=$1
fi
iseq=$seq
if [ -z ${OUTPUT+x} ]; then
    OUTPUT=${tag}/${iseq}.ss
fi
python split.py $seq
finaloutput=$seq
seq=${seq}.seq
python3 splitfile.py $seq $numthreads
echo "started knn"
for i in `seq 0 $lownumthreads`; do
    ./lpgenerator PredictProteinKnnCoil 23 alpha.words beta.words other.words ${seq}_${numthreads}_${i} $lenwords ${tag}/${seq}.knn_${i} $k $firstitr 7 &
done
wait
echo "end knn"
cat ${tag}/${seq}.knn_0 > ${tag}/${seq}.knn
for i in `seq 1 $lownumthreads`; do
    cat ${tag}/${seq}.knn_${i} >> ${tag}/${seq}.knn
done
python3 getSecondaryStructure.py ${tag}/${seq}.knn ${tag}/${seq}.knnss 8 1
echo "end ss"
python3 overlappingwords.py ${tag}/${seq}.knn ${tag}/${seq}.probs $tag $k 
python3 eightoverlappingwords.py ${tag}/${seq}.knnss ${tag}/${seq}.probs8 $tag $k 
echo "done overlapping"
python3 accuracyestimator.py ${tag}/${seq}.probs_d 3state $OUTPUT/${finaloutput}.est
python3 accuracyestimator.py ${tag}/${seq}.probs_d 8state $OUTPUT/${finaloutput}.est8

python3 dynamicprogramming.py ${tag}/${seq}.probs $OUTPUT/${finaloutput}.ss 3
python3 dynamicprogramming.py ${tag}/${seq}.probs8 $OUTPUT/${finaloutput}.ss8 8
echo "writing output"
rm $seq* ${tag}/${seq}.*
#python convertprobabilities.py ${tag}/${seq}.probs $iseq ${tag}/${iseq}.ss
